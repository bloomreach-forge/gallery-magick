<?xml version="1.0" encoding="UTF-8"?>
<!--
    Copyright 2024 Bloomreach B.V. (http://www.bloomreach.com)

    Licensed under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0 Unless required by
    applicable law or agreed to in writing, software distributed under
    the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
    OR CONDITIONS OF ANY KIND, either express or implied. See the
    License for the specific language governing permissions and
    limitations under the License.
  -->
<document>
  <properties>
    <title>Introduction</title>
  </properties>
  <body>
    <section name="Introduction">
      <subsection name="What is Gallery Magick Image Processing?">
        <p>
          Gallery Magick Image Processing provides an image file processing library
          and CMS plugins to manipulate image files, using any of these:
        </p>
        <ul>
          <li><a href="https://github.com/rkalla/imgscalr">imgscalr - Java Image-Scaling Library</a></li>
          <li><a href="http://www.graphicsmagick.org/">GraphicsMagick</a></li>
          <li><a href="http://www.imagemagick.org/">ImageMagick</a></li>
        </ul>
        <p>
          <code>org.onehippo.forge.gallerymagick.core.command.ScalrProcessorUtils</code> utility class
          provides a pure Java based image identifying/resizing solution.
        </p>
        <p>
          When using a non-Java based solution, it executes commands of either
          <a href="http://www.graphicsmagick.org/">GraphicsMagick</a>
          or <a href="http://www.imagemagick.org/">ImageMagick</a>):
        </p>
        <img alt="Gallery Magick Image Processing" src="images/gallery-magick.png" />
        <p>
          Gallery Magick Image Processing basically aims to provide the following:
        </p>
        <ul>
          <li>
            <a href="core/index.html"><strong>Gallery Magick Image Processing Core Library</strong> </a> :
            Programmatic Utilities to process image files using
            <a href="https://github.com/rkalla/imgscalr">imgscalr - Java Image-Scaling Library</a>,
            <a href="http://www.graphicsmagick.org/">GraphicsMagick</a>, or
            <a href="http://www.imagemagick.org/">ImageMagick</a>.
          </li>
          <li>
            <a href="cms-plugins/index.html"><strong>Gallery Magick Image Processing CMS Plugins</strong></a> :
            CMS Plugins such as Magick Command Gallery Processor using
            <strong>Gallery Image Processing Core Library</strong>.
          </li>
        </ul>
      </subsection>

      <subsection name="Image Metadata Property">
        <p>
          When images are uploaded through <a href="cms-plugins/index.html"><strong>Gallery Magick Image Processing CMS Plugins</strong></a>,
          the plugin will extract all the image metadata automatically (through <code>identify -verbose</code> command internally)
          and store the result metadata string in <code>gallerymagick.metadata (string)</code> property at the
          <code>hippogallery:imageset</code> node (the parent node of all the image variant nodes such as
          <code>hippogallery:original</code> or <code>hippogallery:thumbnail</code>).
        </p>
        <p>
          So, you can easily read the <code>gallerymagick.metadata</code> property to read the metadata such as camera maker,
          geo-location where the photo was taken, etc. Here's an example of image metadata extracted by <a href="http://www.graphicsmagick.org/">GraphicsMagick</a>:
        </p>
        <div class="brush: plain">
        <source><![CDATA[
Image: IMG_4181_2.JPG
  Format: JPEG (Joint Photographic Experts Group JFIF format)
  Geometry: 1600x1200
  Class: DirectClass
  Type: true color
  Depth: 8 bits-per-pixel component

  # SNIP

  Profile-EXIF: 1912 bytes
    Make: Apple
    Model: iPhone 6
    Orientation: 1
    X Resolution: 72/1
    Y Resolution: 72/1
    Resolution Unit: 2
    Software: 10.2
    Date Time: 2018:04:03 15:29:38

    # SNIP

    GPS Info: 1596
    GPS Latitude Ref: N
    GPS Latitude: 42/1,21/1,1463/100
    GPS Longitude Ref: W
    GPS Longitude: 71/1,3/1,3160/100
    GPS Altitude Ref: .
    GPS Altitude: 12786/359
    GPS Time Stamp: 19/1,29/1,33/1
    GPS Speed Ref: K
    GPS Speed: 0/1
    GPS Img Direction Ref: T
    GPS Img Direction: 15709/56
    GPS Dest Bearing Ref: T
    GPS Dest Bearing: 15709/56
    GPS Date Stamp: 2018:04:03
  Profile-XMP: 2549 bytes
  Tainted: False
  User Time: 0.030u
  Elapsed Time: 0m:0.035343s
  Pixels Per Second: 51.8Mi
        ]]></source>
        </div>
      </subsection>

      <subsection name="Code base on GitHub">
        <p>The code of this project is on GitHub at <a href="https://github.com/bloomreach-forge/gallery-magick/">https://github.com/bloomreach-forge/gallery-magick/</a>.</p>
      </subsection>

    </section>

    <section name="Demo Application">

      <subsection name="Demo Application with brXM">
        <p>There is a demo submodule in which you can build and run a demo application, which configures <strong>Magick Command Gallery Processor Plugin</strong>.</p>
        <p>Here are example commands to check out, build and run demo application:</p>
        <div class="brush: bash">
        <source><![CDATA[
$ cd demo
$ mvn clean verify
$ mvn -P cargo.run
        ]]></source>
        </div>
        <p>
          Visit http://localhost:8080/cms/, move to the "Content" perspective and select "Images".
        </p>
        <p>
          And select a folder and try to upload an image.
        </p>
        <img alt="Uploading Image" src="images/upload-image1.png" />
        <p>
          If you click on the "Upload" button, you will see the image being uploaded.
        </p>
        <img alt="Uploaded Image" src="images/upload-image2.png" />
        <p>
          You don't see anything new yet. :-)
          It's basically working like how the default Gallery Processor works, so the functionally is almost the same.
        </p>
        <p>
          However, if you take a look at the logs
          (the demo project is configured to leave logs in DEBUG level for the plugin related code by default),
          you will see <i>clues</i> about how the plugin works under the hood!
        </p>
        <p>
          <em>Note:</em> the log data shown above were minified for readability.
        </p>
        <p>
          Basically, when either of the non-Java based solution,
          the plugin copies the original image data to a temporary file and resizes the temporary file of the original image
          for a thumbnail image by executing commands of either <a href="http://www.graphicsmagick.org/">GraphicsMagick</a>
          or <a href="http://www.imagemagick.org/">ImageMagick</a>.
          After executing the commands, it deletes all the temporary files.
        </p>
        <p>
          Also, try to crop and restore thumbnails in the CMS UI to get more clues.
        </p>

      </subsection>

    </section>

    <section name="Project status">
      <p>
        Please see <a href="release-notes.html">Release Notes</a>.
      </p>
    </section>
  </body>
</document>
